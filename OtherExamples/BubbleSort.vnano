coding UTF-8;
/*
 * A Vnano script code of Bubble Sort.
 * 単純なバブルソートを行うVnanoスクリプトコード
 * --------------------------------------------------------------------------------
 * This file is released under CC0.
 * Written in 2018 by RINEARN (Fumihiro Matsui)
 * --------------------------------------------------------------------------------
 * 
 * Preparing - 事前準備
 * 
 *     Execute "build.bat" or "build.sh" in advance to generate "Vnano.jar".
 *     あらかじめ build.bat か build.sh を実行し、Vnano.jar を生成しておいて下さい。
 * 
 * 
 * How to run this code - このコードの実行方法 :
 * 
 *     Set the current directory to the location of "Vnano.jar" by cd command, then:
 *     VCSSL.jar と同じ場所に cd コマンドで移動し、以下のように実行します：
 * 
 *         java -jar Vnano.jar OtherExamples/BubbleSort.vnano --encoding UTF-8
 * 
 *     The expected result is :
 *     正常な実行結果の値は：
 * 
 *         --------------------------------------------------
 *          BEFORE
 *         --------------------------------------------------
 *         a[0] = 8575
 *         a[1] = 3904
 *         a[2] = 2435
 *         a[3] = 6027
 *         a[4] = 683
 *         a[5] = 9192
 *         a[6] = 897
 *         a[7] = 6102
 *         a[8] = 468
 *         a[9] = 3617
 *         --------------------------------------------------
 *          AFTER
 *         --------------------------------------------------
 *         a[0] = 468
 *         a[1] = 683
 *         a[2] = 897
 *         a[3] = 2435
 *         a[4] = 3617
 *         a[5] = 3904
 *         a[6] = 6027
 *         a[7] = 6102
 *         a[8] = 8575
 *         a[9] = 9192
 * 
 *     If you dump the compiling contents for the debugging of the script engine:
 *     もし、スクリプトエンジンのデバッグ用などでコンパイル過程をダンプしたい場合は：
 * 
 *         java -jar Vnano.jar OtherExamples/BubbleSort.vnano --encoding UTF-8 --dump
 *         (dump all contents)
 * 
 *     or,
 * 
 *         java -jar Vnano.jar OtherExamples/BubbleSort.vnano --encoding UTF-8 --dump assemblyCode --run false
 *         (dump the compiled VRIL code only)
 * 
 * --------------------------------------------------------------------------------
 */


// An array to sort.
// ソート対象の配列

int N = 10;
int values[N];


// Fill the array with quasi-random numbers.
// 適当に乱雑な数列を詰める

int randValue = 12345;
int ratio   = 82347207;
int offset  = 32149123;
int modular = 9287;
for (int i=0; i<N; i++) {
	randValue = (randValue * ratio + offset) % modular;
	values[i] = randValue;
}


// Output contents of the array.
// 配列の中身を表示

output("--------------------------------------------------\n");
output(" BEFORE \n");
output("--------------------------------------------------\n");
for (int i=0; i<N; i++) {
	output("a[" + i + "] = " + values[i] + "\n");
}


// Sort the array.
// 配列の中身をソートする

bool orderCanged = true;
int sortedN = 0;

while (orderCanged) {
	
	orderCanged = false;
	
	for (int i = 0; i < N-1-sortedN; i++) {
		
		if (values[i] > values[i+1]) {
			int stock = values[i];
			values[i] = values[i+1];
			values[i+1] = stock;
			orderCanged = true;
		}
	}
	
	sortedN++;
}


// Output contents of the sorted array.
// ソートした配列の中身を表示

output("--------------------------------------------------\n");
output(" AFTER \n");
output("--------------------------------------------------\n");
for (int i=0; i<N; i++) {
	output("a[" + i + "] = " + values[i] + "\n");
}

