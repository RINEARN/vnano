coding UTF-8;
/*
 * A benchmarking program for measuring the peak performance of 
 * 64-bit floating-point vector operations of Vnano Engine.
 * --------------------------------------------------------------------------------
 * This file is released under CC0.
 * Written in 2018-2022 by RINEARN (Fumihiro Matsui)
 * --------------------------------------------------------------------------------
 * 
 * Preparation
 * 
 *     Execute "build.bat" or "build.sh" in advance to generate "Vnano.jar".
 * 
 * How to Run This Code
 * 
 *     Set the current directory to the location of "Vnano.jar" by cd command, then:
 * 
 *         java -jar Vnano.jar benchmark/VectorFlops.vnano --accelerator true --optLevel 3
 * 
 * Example of Result
 * 
 *     OPERATING_SPEED = 15.400812152203338 [GFLOPS]
 *     REQUIRED_TIME = 13.298 [SEC]
 *     TOTAL_OPERATIONS = 204800000000 [xFLOAT64_ADD]
 *     VECTOR_SIZE = 2048 [x64BIT]
 *     OPERATED_VALUES = { 1.0E8, 2.0E8, 3.0E8, ... 2.047E11, 2.048E11 }
 * 
 *     * Values of OPERATING_SPEED and REQUIRED_TIME are dependent on your environment.
 * 
 * --------------------------------------------------------------------------------
 */

// Note: The precision of "float" type in the Vnano is 64-bit, same with "double".

int VECTOR_SIZE = 2048;
int LOOP_N = 1000*1000;
int FLOP_PER_LOOP = VECTOR_SIZE * 100;
int TOTAL_FLOP = FLOP_PER_LOOP * LOOP_N;

float x[VECTOR_SIZE];
float y[VECTOR_SIZE];
for (int i=0; i<VECTOR_SIZE; i++) {
	x[i] = 0.0;
	y[i] = i + 1.0;
}

int beginTime = time();

for (int i=0; i<LOOP_N; ++i) {

	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;
	x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y; x+=y;

}

int endTime = time();
float requiredTime = (endTime - beginTime) / 1000.0;
float flops = TOTAL_FLOP / requiredTime;

output("OPERATING_SPEED = " +  flops/(1000.0*1000.0*1000.0) + " [GFLOPS]");
output("REQUIRED_TIME = "+ requiredTime + " [SEC]");
output("TOTAL_OPERATIONS = " + TOTAL_FLOP + " [xFLOAT64_ADD]");
output("VECTOR_SIZE = " + VECTOR_SIZE + " [x64BIT]");
output("OPERATED_VALUES = { " + x[0] + ", " + x[1] + ", " + x[2] + ", ... " + x[VECTOR_SIZE-2] + ", " + x[VECTOR_SIZE-1] + " }");

